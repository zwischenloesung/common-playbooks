---

- name: "For every future user, add new credentials to the store"
  ansible.builtin.include_role:
    name: add-credentials-to-store
  vars:
    target_file: ''
    credentials_key: "unused"
    credentials_name: "{{ item.credentials_name }}"
    credentials_user: "{{ item.name }}"
    password_chars: "{{ item.password_chars | d(default_password_chars, true) }}"
  loop: "{{ db_users }}"

- name: "Create directories for Postgres configs and Grafana example dashboards"
  ansible.builtin.file:
    path: "{% if i.type == 'directory' %}{{ i.dest }}{% else %}{{ i.dest | dirname }}{% endif %}"
    state: directory
    mode: "{{ i.mode }}"
  vars:
    i: "{{ item.value }}"
  loop: "{{ templates | dict2items }}"
  loop_control:
    label: "{{ item.value.dest }}"

- name: "Get the db schema files in place"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ schema_files_path }}/"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0640"
  loop: "{{ schema_files.values() | list }}"
  loop_control:
    label: "{{ item }}"

- name: "Add the db schema template for the projects"
  ansible.builtin.template:
    src: '{{ templates.projects.src }}'
    dest: '{{ templates.projects.dest }}'
    mode: "0640"
    owner: '{{ postgresql_user }}'
    group: '{{ postgresql_group }}'

- name: "Render one example Grafana dashboard JSON per project"
  ansible.builtin.template:
    src: "{{ templates.grafana.src }}"
    dest: "{{ templates.grafana.dest }}/{{ project.name | lower | regex_replace('[^a-z0-9]+', '_') }}_dashboard.json"
    mode: '0644'
  loop: "{{ service_basin_projects }}"
  loop_control:
    loop_var: project
    label: "{{ project.name }}"

- name: "Create the cron admin database"
  community.postgresql.postgresql_db:
    state: present
    name: "{{ db_cron_name }}"
  become: yes
  become_user: "{{ postgresql_user }}"
  register: db_cron_exists

- name: "Create the app database"
  community.postgresql.postgresql_db:
    state: present
    name: "{{ db_name }}"
  become: yes
  become_user: "{{ postgresql_user }}"
  register: db_app_exists

- name: "Get count of existing cron jobs (if cron db exists)"
  community.postgresql.postgresql_query:
    db: "{{ db_cron_name }}"
    query: SELECT COUNT(*) AS cron_job_count FROM cron.job;
  become: yes
  become_user: "{{ postgresql_user }}"
  when: db_cron_exists is defined and db_cron_exists.changed == false
  register: cron_stats

- name: "Collect schema stats from {{ db_name }} (if it exists)"
  community.postgresql.postgresql_query:
    db: "{{ db_name }}"
    query: |
      SELECT
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '_meta') AS has_meta,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'persons') AS has_persons,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_persons') AS has_shadow_persons,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'contacts') AS has_contacts,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_contacts') AS has_shadow_contacts,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sourcetypes') AS has_sourcetypes,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_sourcetypes') AS has_shadow_sourcetypes,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sources') AS has_sources,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_sources') AS has_shadow_sources,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'projects') AS has_projects,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_projects') AS has_shadow_projects,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'roles') AS has_roles,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_roles') AS has_shadow_roles,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'recordings') AS has_recordings,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'recordings_staging') AS has_staging,
      (SELECT COUNT(*) FROM projects) AS project_count,
      (SELECT COUNT(*) FROM sourcetypes) AS sourcetype_count,
      (SELECT COUNT(*) FROM sources) AS source_count,
      (SELECT COUNT(*) FROM pg_proc WHERE pronamespace::regnamespace::text = 'public') AS function_count,
      (SELECT COUNT(*) FROM pg_trigger) AS trigger_count;
  become: yes
  become_user: "{{ postgresql_user }}"
  when: db_app_exists is defined and db_app_exists.changed == false
  register: schema_stats

- name: "Insert an entry for every user:address mapping"
  ansible.builtin.blockinfile:
    path: "{{ pg_hba_path }}" 
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.name }} #"
    insertafter: EOF
    block: |
      {% for a in item.address %}
        host    {{ db_name }}     {{ item.name }}        {{ a }}        {{ item.pw_hash | d(default_password_hash, true) }}
      {% endfor %}
  loop: '{{ db_users }}'
  become: yes
  become_user: "{{ postgresql_user }}"

- name: "Add the schema for the cron jobs"
  ansible.builtin.template:
    src: '{{ templates.cron_jobs.src }}'
    dest: '{{ templates.cron_jobs.dest }}'
    mode: "0640"
    owner: '{{ postgresql_user }}'
    group: '{{ postgresql_group }}'
  when: >
    'app.postgresql.pg_cron' in group_names

- name: "Configure the db for pg_cron"
  ansible.builtin.template:
    src: '{{ templates.pg_cron.src }}'
    dest: '{{ templates.pg_cron.dest }}'
    mode: "0640"
    owner: '{{ postgresql_user }}'
    group: '{{ postgresql_group }}'
  when: >
    'app.postgresql.pg_cron' in group_names
  register: pg_cron_rendered_template

- name: "Restart PostgreSQL"
  ansible.builtin.command: >
    systemctl restart postgresql
  when: >
    'app.postgresql.pg_cron' in group_names and
    pg_cron_rendered_template is changed

- name: "Install the cron extension in the cron admin db"
  ansible.builtin.command: >
    psql -d {{ db_cron_name }} -f {{ schema_files_path ~ "/" ~ schema_files.extension_cron }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    'app.postgresql.pg_cron' in group_names

- name: "Install the other extensions needed in the app db"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.extensions }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'extensions') | map(attribute='enabled') | first | d(false)

- name: "Create the tables"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.tables }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'tables') | map(attribute='enabled') | first | d(false)

- name: "Create the views"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.views }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'views') | map(attribute='enabled') | first | d(false)

- name: "Create the roles and privledges"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.roles }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'roles') | map(attribute='enabled') | first | d(false)

- name: "Create the functions"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.functions }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'functions') | map(attribute='enabled') | first | d(false)

- name: "Create the triggers"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.triggers }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'triggers') | map(attribute='enabled') | first | d(false)

- name: "Insert the content: projects, sourcetypes, sources"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f '{{ templates.projects.dest }}'
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'content') | map(attribute='enabled') | first | d(false)

- name: "Create the cron jobs"
  ansible.builtin.command: >
    psql -d {{ db_cron_name }} -f {{ templates.cron_jobs.dest }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    'app.postgresql.pg_cron' in group_names and
    schema_files_auto_enable | selectattr('name', 'equalto', 'cron') | map(attribute='enabled') | first | d(false)

- name: "Insert the version info"
  ansible.builtin.command: >
    psql -d {{ db_name }} -f {{ schema_files_path ~ "/" ~ schema_files.version }}
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    schema_files_auto_enable | selectattr('name', 'equalto', 'version') | map(attribute='enabled') | first | d(false)

- name: "Get the password from file if possible"
  register: accountsfile
  ansible.builtin.slurp:
    src: "{{ account_store }}"

- name: "Get the credentials from file"
  ansible.builtin.set_fact: 'accountinfos={{ accountsfile["content"] | b64decode | from_yaml }}'

- name: "Create requested user(s)"
  community.postgresql.postgresql_user:
    login_db: '{{ db_name }}'
    state: present
    name: '{{ item.name }}'
    password: '{{ accountinfos[item.credentials_name]["value"] }}'
    comment: '{{ item.comment | d(default_user_comment) }}'
  loop: '{{ db_users }}'
  become: yes
  become_user: "{{ postgresql_user }}"

- name: "Ensure every requested user is a member of its respective group"
  community.postgresql.postgresql_membership:
    login_db: postgres
    group: "{{ item.group }}"
    target_roles:
      - "{{ item.name }}"
    state: present
  loop: '{{ db_users }}'
  become: yes
  become_user: "{{ postgresql_user }}"

- name: "(Again:) Get count of existing cron jobs (if cron db exists)"
  community.postgresql.postgresql_query:
    db: "{{ db_cron_name }}"
    query: SELECT COUNT(*) AS cron_job_count FROM cron.job;
  become: yes
  become_user: "{{ postgresql_user }}"
  when: >
    'app.postgresql.pg_cron' in group_names
  register: cron_again_stats

- name: "(Again:) Collect schema stats from {{ db_name }} (if it exists)"
  community.postgresql.postgresql_query:
    db: "{{ db_name }}"
    query: |
      SELECT
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '_meta') AS has_meta,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'persons') AS has_persons,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_persons') AS has_shadow_persons,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'contacts') AS has_contacts,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_contacts') AS has_shadow_contacts,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sourcetypes') AS has_sourcetypes,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_sourcetypes') AS has_shadow_sourcetypes,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sources') AS has_sources,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_sources') AS has_shadow_sources,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'projects') AS has_projects,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_projects') AS has_shadow_projects,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'roles') AS has_roles,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'shadow_roles') AS has_shadow_roles,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'recordings') AS has_recordings,
      EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'recordings_staging') AS has_staging,
      (SELECT COUNT(*) FROM projects) AS project_count,
      (SELECT COUNT(*) FROM sourcetypes) AS sourcetype_count,
      (SELECT COUNT(*) FROM sources) AS source_count,
      (SELECT COUNT(*) FROM pg_proc WHERE pronamespace::regnamespace::text = 'public') AS function_count,
      (SELECT COUNT(*) FROM pg_trigger) AS trigger_count;
  become: yes
  become_user: "{{ postgresql_user }}"
  register: schema_again_stats

- name: "SUMMARY: App database details"
  debug:
    msg: |
      {% if db_app_exists.changed %}
      "A new application database was created. Initial content:"
      {% else %}
      "Application database content summary:"
      {% endif %}

      "- item: Now (Before)"
      {% for item in schema_again_stats.query_result[0] %}
      - {{ item | replace('_', ' ') | title }} | {{ schema_stats.query_result[0][item] | default('–') }} | {{ schema_again_stats.query_result[0][item] | default('–') }}
      {% endfor %}

- name: "Prepare DB summary as structured object"
  set_fact:
    app_db_summary:
      name: "{{ db_name }}"
      description: >-
        {% if db_app_exists.changed %}
        A new application database was created.
        with the following components: now(before).
        {% else %}
        The application database was updated
        with the following components: now(before).
        {% endif %}
      components:
        before: "{{ lookup('vars', 'schema_again_stats').query_result[0] }}"
        now: "{{ lookup('vars', 'schema_stats').query_result[0] }}"

- name: "SUMMARY: show app DB contents"
  debug:
    var: app_db_summary

- name: "SUMMARY: show DB cron details"
  debug:
    msg: |
      {% if db_cron_exists.changed %}
      A new central database for cron tasks was added with {{ cron_again_stats.query_result[0].cron_job_count }} tasks.
      {% else %}
      Currently, there are {{ cron_again_stats.query_result[0].cron_job_count }} cron tasks (before: {{ cron_stats.query_result[0].cron_job_count }}).
      {% endif %}
  when: >
    'app.postgresql.pg_cron' in group_names



